#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 11>;
        };

        escape {
            bindings = <&kp LG(ESC)>;
            key-positions = <0 1>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        LeftClick {
            bindings = <&mkp LCLK>;
            key-positions = <38 39>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <40 41>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                   &kp W      &kp E         &kp R     &kp T                                               &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A                   &kp S      &kp D         &kp F     &kp G      &kp GRAVE             &kp MINUS          &kp H      &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z        &kp X      &kp C         &kp V     &kp B      &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMICOLON
&lt_to_layer_0 1 LCTRL  &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &kp SPACE  &kp ESC               &kp BACKSPACE      &kp ENTER                             &lt 2 SLASH
            >;
        };

        FUNCTION {
            bindings = <
&kp N1          &kp N2     &kp N3        &kp N4    &kp N5                                   &kp N6      &kp N7  &kp N8     &kp N9      &kp N0
&kp TAB         &trans     &trans        &trans    &trans     &kp GRAVE      &kp MINUS      &kp F6      &kp F7  &kp F8     &kp F9      &kp SINGLE_QUOTE
&kp LEFT_SHIFT  &trans     &trans        &trans    &trans     &kp LBKT       &kp RBKT       &trans      &trans  &kp COMMA  &kp PERIOD  &kp SEMICOLON
&trans          &kp LCTRL  &kp LEFT_ALT  &kp LCMD  &kp SPACE  &kp ESC        &kp BACKSPACE  &kp RETURN                                 &kp SLASH
            >;
        };

        BT_ARROW_CL {
            bindings = <
&kp ESCAPE      &kp UP_ARROW            &trans           &kp LC(TAB)              &trans                            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp LEFT_ARROW  &kp DOWN_ARROW          &kp RIGHT_ARROW  &trans                   &kp END    &trans         &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans           &kp LG(LS(RIGHT_ARROW))  &trans     &trans         &trans  &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans          &trans                  &trans           &mkp LCLK                &mkp MCLK  &mkp RCLK      &trans  &trans                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };
    };
};
